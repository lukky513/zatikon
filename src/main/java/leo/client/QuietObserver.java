///////////////////////////////////////////////////////////////////////
// Name: QuietObserver
// Desc: A quiet observer
// Date: 2/26/2009 - Gabe Jones
// TODO:
///////////////////////////////////////////////////////////////////////
package leo.client;

// imports

import leo.shared.*;

import java.util.Vector;

public class QuietObserver implements Observer {

    /////////////////////////////////////////////////////////////////
    // Properties
    /////////////////////////////////////////////////////////////////


    /////////////////////////////////////////////////////////////////
    // Constructor
    /////////////////////////////////////////////////////////////////
    public QuietObserver() {
    }


    /////////////////////////////////////////////////////////////////
    // Select a unit
    /////////////////////////////////////////////////////////////////
    public void selectUnit(Unit unit) {
    }


    /////////////////////////////////////////////////////////////////
    // Unit effect
    /////////////////////////////////////////////////////////////////
    public void unitEffect(Unit target, int effect) {
    }


    /////////////////////////////////////////////////////////////////
    // End the game
    /////////////////////////////////////////////////////////////////
    public void endGame(Castle winner) {
    }


    /////////////////////////////////////////////////////////////////
    // End the game
    /////////////////////////////////////////////////////////////////
    public void enemySurrendered() {
        Client.getGameData().setSelectedUnit(null);
        Client.getImages().playSound(Constants.SOUND_VICTORY);
        Client.getNetManager().stop();

        try {
            Thread.sleep(1000);
        } catch (Exception e) {
        }

        Client.getNetManager().sendAction(Action.NOTHING, Action.NOTHING, Action.NOTHING);
        Client.getGameData().screenEndGame("Your enemy has surrendered. You have won!", true);
        Client.getText().clear();
    }


    /////////////////////////////////////////////////////////////////
    // End the game
    /////////////////////////////////////////////////////////////////
    public void allySurrendered() {
        Client.getGameData().setSelectedUnit(null);
        Client.getImages().playSound(Constants.SOUND_DEFEAT);
        Client.getNetManager().stop();

        try {
            Thread.sleep(1000);
        } catch (Exception e) {
        }

        Client.getNetManager().sendAction(Action.NOTHING, Action.NOTHING, Action.NOTHING);
        Client.getGameData().screenEndGame("Your ally has left. You have lost.", false);
        Client.getText().clear();
    }


    /////////////////////////////////////////////////////////////////
    // An attack
    /////////////////////////////////////////////////////////////////
    public void attack(Unit attacker, Unit victim, short damage, int type) {
    }


    /////////////////////////////////////////////////////////////////
    // Unit has been damaged
    /////////////////////////////////////////////////////////////////
    public void unitDamaged(Unit source, Unit damagedUnit, short amount) {
    }


    /////////////////////////////////////////////////////////////////
    // Play a sound
    /////////////////////////////////////////////////////////////////
    public void playSound(short sound) {
    }


    /////////////////////////////////////////////////////////////////
    // Draw an image
    /////////////////////////////////////////////////////////////////
    public void imageDraw(Unit unit, short location, int image, int duration) {
    }


    /////////////////////////////////////////////////////////////////
    // Ability used
    /////////////////////////////////////////////////////////////////
    public void abilityUsed(short source, short damagedUnit, int image) {
    }


    /////////////////////////////////////////////////////////////////
    // Castle addition
    /////////////////////////////////////////////////////////////////
    public void castleAddition(Unit newUnit) {
        if (newUnit.getID() == UnitType.NONE) return;
        Client.getGameData().getEnemyCastle().clear();
        if (newUnit.getTeam() == Unit.TEAM_2) {
            Client.getGameData().getMyCastle().removeLast();
        }
    }


    /////////////////////////////////////////////////////////////////
    // Castle needs refreshing
    /////////////////////////////////////////////////////////////////
    public void castleRefresh(Castle castle) {
    }


    /////////////////////////////////////////////////////////////////
    // Area effect
    /////////////////////////////////////////////////////////////////
    public void areaEffect(short source, short destination, int type, Unit victim) {
    }


    /////////////////////////////////////////////////////////////////
    // Fireball!
    /////////////////////////////////////////////////////////////////
    public void fireball(short source, short destination, int image, Vector<Unit> victims, Vector<Short> damages, short type) {
    }


    /////////////////////////////////////////////////////////////////
    // Lightning!
    /////////////////////////////////////////////////////////////////
    public void lightning(short source, short destination) {
    }


    /////////////////////////////////////////////////////////////////
    // Text!
    /////////////////////////////////////////////////////////////////
    public void text(String text) {
    }


    /////////////////////////////////////////////////////////////////
    // Something dies
    /////////////////////////////////////////////////////////////////
    public void death(Unit victim) {
    }


    /////////////////////////////////////////////////////////////////
    // Draw game
    /////////////////////////////////////////////////////////////////
    public void drawGame() {
    }
}
